---
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="パスワードリセット">
<div class="max-w-md mx-auto my-20 p-8 bg-gray-800 rounded-lg shadow-xl border border-gray-700">

    <h1 class="text-3xl font-bold text-center text-white mb-2">パスワードをリセット</h1>
    
    <p class="text-center text-gray-400 mb-8">
        ご登録のメールアドレスを入力してください。パスワード再設定用のリンクを送信します。
    </p>

    <form id="reset-request-form" class="space-y-6">
        
        <div>
            <label for="email" class="form-label">メールアドレス</label>
            <input 
                id="email" 
                name="email" 
                type="email" 
                required 
                class="form-input" 
                placeholder="your-email@example.com"
            >
        </div>
        
        <div>
            <button type="submit" class="btn btn-primary w-full">
                <span>リセット用リンクを送信</span>
            </button>
        </div>
        
        <p 
            id="feedback-message" 
            class="text-center text-sm pt-2 transition-opacity duration-300 opacity-0"
            ></p>
        
    </form>
</div>

<div class="text-center mt-2">
    <p class="text-xs text-gray-500">
        ※購入時のメールアドレスが不明な場合は、ご購入の際の控えメールを添えて、<br>「購入時メールアドレスがわかりません」という件名で、下記までご連絡ください。<br>
        <a href="mailto:info@ai-verve.net" class="text-blue-400 hover:underline">info@ai-verve.net</a>
    </p>
</div>

<script is:inline>
    const form = document.getElementById('reset-request-form');
    const messageEl = document.getElementById('feedback-message');

    if (form) {
        form.addEventListener('submit', async (e) => {
            // デフォルトのフォーム送信（ページのリロード）を、まず無効化する
            e.preventDefault();

            // ★★★【浄化】★★★
            // 以前のコードにあった、異世界の呪文（TypeScriptの型注釈）を完全に排除し、
            // 純粋なJavaScriptとして、確実に動作するよう修正する。
            const emailInput = document.getElementById('email');
            if (!emailInput) {
                console.error('Email input element not found.');
                return;
            }
            const email = emailInput.value;

            // 処理中であることをユーザーに示す（任意だが、美しい体験には不可欠）
            const submitButton = form.querySelector('button[type="submit"]');
            if(submitButton) submitButton.disabled = true;
            if(messageEl) messageEl.textContent = '処理中...';

            try {
                const response = await fetch('/snspack/wp-json/a1-project/v1/request-password-reset', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: email })
                });

                const data = await response.json();

                if (!response.ok) {
                    // サーバーからのエラーメッセージがあれば、それを表示する
                    throw new Error(data.message || '不明なエラーが発生しました。');
                }

                // 成功・失敗に関わらず、ユーザーには同じメッセージを表示し、安心感を与える
                if (messageEl) {
                    messageEl.textContent = 'ご入力いただいたメールアドレス宛に、パスワード再設定のご案内を送信しました。（アカウントが存在しない場合、メールは送信されません）';
                    messageEl.style.color = 'white';
                    messageEl.style.opacity = '1';
                }

            } catch (error) {
                // 失敗した場合は、具体的なエラー内容をコンソールに記録し、ユーザーには汎用的なメッセージを見せる
                console.error('Password reset request failed:', error);
                if (messageEl) {
                    messageEl.textContent = 'エラーが発生しました。時間をおいて再度お試しください。';
                    messageEl.style.color = '#f87171'; // 赤色
                    messageEl.style.opacity = '1';
                }
            } finally {
                // 処理が成功しようが失敗しようが、必ずボタンを再度有効化する
                if(submitButton) submitButton.disabled = false;
            }
        });
    }
</script>
</BaseLayout>