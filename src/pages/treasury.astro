---
import BaseLayout from '../layouts/BaseLayout.astro';

// カテゴリーIDをあなたの環境に合わせて修正すること
const TREASURE_CATEGORY_ID = 20; // 例：あなたの「宝物」カテゴリーのID

// 頭脳（WordPress）から全ての「宝物」データを召喚する
let formattedTreasures = [];
try {
const response = await fetch(`https://ai-verve.net/snspack/wp-json/wp/v2/posts?categories=${TREASURE_CATEGORY_ID}&per_page=100&_fields=id,title,acf`);
if (response.ok) {
        const treasuresFromWP = await response.json();
        // WordPressからのデータを、JavaScriptが使いやすい形式に変換する
        formattedTreasures = treasuresFromWP.map(post => ({
            id: post.id,
    title: post.title.rendered,
    description: post.acf.treasure_description || '説明がありません',
    category: post.acf.treasure_category || 'idea',
    button_type: post.acf.button_type,    // この行を追加
    button_value: post.acf.button_value // この行を追加
        }));
    }
} catch (e) {
    console.error("Failed to fetch treasures:", e);
}
---

<BaseLayout title="宝物庫">
<Fragment slot="head">
    <style>
        /* 宝物庫専用スタイル */
        .treasure-card { cursor: pointer; transition: opacity 0.3s ease; }
        .treasure-card.is-hidden { opacity: 0.1; pointer-events: none; }
        #compass-view .compass-question { text-align: center; padding: 3rem 1rem; background-color: var(--color-content-bg); border-radius: 12px; }
        #compass-view .compass-choices { display: flex; justify-content: center; flex-wrap: wrap; gap: 1rem; margin-top: 2rem; }
        #compass-view .choice-btn { background-color: transparent; border: 1px solid var(--color-border); color: var(--color-text-main); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; transition: all 0.2s ease; }
        #compass-view .choice-btn:hover { background-color: var(--color-accent-primary); color: var(--color-bg); border-color: var(--color-accent-primary); }
        /* モーダル */
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); display: flex; align-items: center; justify-content: center; z-index: 1000; opacity: 0; visibility: hidden; transition: opacity 0.3s ease; }
        .modal-overlay.visible { opacity: 1; visibility: visible; }
        .modal-container { background-color: #111827; border: 1px solid var(--color-accent-secondary); border-radius: 12px; width: 90%; max-width: 700px; max-height: 90vh; display: flex; flex-direction: column; transform: scale(0.95); transition: transform 0.3s ease; }
        .modal-overlay.visible .modal-container { transform: scale(1); }
        .modal-header { padding: 1rem 1.5rem; border-bottom: 1px solid var(--color-border); display: flex; justify-content: space-between; align-items: center; }
        .modal-title { color: var(--color-accent-secondary); font-size: 1.25rem; font-weight: 700; margin: 0; }
        .modal-close { background: none; border: none; color: var(--color-text-sub); font-size: 1.5rem; cursor: pointer; }
        .modal-content { padding: 1.5rem; overflow-y: auto; }
    </style>
</Fragment>

                <div class="flex justify-between items-center mb-8">
                    <div>
                        <h1 class="page-title mb-2">叡智の宝物庫</h1>
                        <p class="text-xl text-gray-400 placeholder-text">【ここに宝物庫の説明文が入ります。】</p>
                    </div>
                    <div class="view-toggle">
                        <button id="library-toggle" class="toggle-btn active">図書館モード</button>
                        <button id="compass-toggle" class="toggle-btn">羅針盤モード</button>
                    </div>
                </div>

                <div id="library-view">
                    <div class="library-controls">
                        <input type="text" id="search-bar" class="search-bar" placeholder="キーワードで宝物を探す...">
                        <p>あなたの求めているものを探すには、検索するか、羅針盤モードをご利用ください。</p>
                    </div>
                    <div id="library-grid" class="card-grid">
                        </div>
                </div>
                
                <div id="compass-view" style="display: none;">
                    <div class="compass-question">
                        <h2 class="placeholder-text">賢明なる庭師よ。
                            <br>今、あなたの庭で、最も手を貸してほしいと願う課題は、
                            <br>次のうちどれだろうか？
                        </h2>
                        <div class="compass-choices">
                            <button class="choice-btn" data-category="idea">投稿ネタが思いつかず、筆が止まっている</button>
                            <button class="choice-btn" data-category="copywriting">自分の商品の魅力が、うまく伝わらない</button>
                            <button class="choice-btn" data-category="efficiency">日々の作業に追われ、時間が足りない</button>
                            <button class="choice-btn" data-category="engagement">顧客との関係構築に、自信がない</button>
                        </div>
                    </div>
                    <div id="compass-results" class="mt-12"></div>
                </div>


    <div id="modal-overlay" class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header">
                <h2 id="modal-title" class="modal-title"></h2>
                <button id="modal-close" class="modal-close">&times;</button>
            </div>
            <div id="modal-content" class="modal-content"></div>
        </div>
    </div>
    
    <div id="treasure-data" data-treasures={JSON.stringify(formattedTreasures)} style="display: none;"></div>

    <script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
            // --- データ保管庫から、全ての宝物の魂を読み込む ---
            const dataElement = document.getElementById('treasure-data');
            const allTreasures = JSON.parse(dataElement.dataset.treasures || '[]');

        // --- DOM要素 ---
        const compassToggle = document.getElementById('compass-toggle');
        const libraryToggle = document.getElementById('library-toggle');
        const compassView = document.getElementById('compass-view');
        const libraryView = document.getElementById('library-view');
        const libraryGrid = document.getElementById('library-grid');
        const searchBar = document.getElementById('search-bar');
        const choiceBtns = document.querySelectorAll('.choice-btn');
        const compassResults = document.getElementById('compass-results');
        const modalOverlay = document.getElementById('modal-overlay');
        const modalTitle = document.getElementById('modal-title');
        const modalContent = document.getElementById('modal-content');
        const modalClose = document.getElementById('modal-close');

        // --- カード生成関数 ---
        function createCard(treasure) {
            const card = document.createElement('div');
            card.className = 'card treasure-card';
            card.dataset.title = treasure.title.toLowerCase();
            card.dataset.description = treasure.description.toLowerCase();
            card.innerHTML = `<div class="card-link"><svg class="card-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M21 7.5l-9-5.25L3 7.5m18 0l-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9" /></svg><h3 class="card-title">${treasure.title}</h3><p class="card-description">${treasure.description}</p><span class="card-cta mt-auto">宝を開ける &rarr;</span></div>`;
            card.addEventListener('click', () => openModal(treasure));
            return card;
        }

        // --- モーダル制御 ---
        // --- モーダル制御 ---
function openModal(treasure) {
    modalTitle.textContent = treasure.title;

    // モーダルの基本コンテンツを生成
    let contentHTML = `<p>${treasure.description}</p>`;

    // ボタンの種類に応じて、表示するボタンのHTMLを生成
    let buttonHTML = '';
    switch (treasure.button_type) {
        case 'copy':
            buttonHTML = `<button id="modal-action-button" class="btn btn-primary mt-4">プロンプトをコピー</button>`;
            break;
        case 'pdf':
            buttonHTML = `<a href="${treasure.button_value}" target="_blank" rel="noopener noreferrer" class="btn btn-primary mt-4">PDFで開く</a>`;
            break;
        case 'download':
        default:
            buttonHTML = `<a href="${treasure.button_value}" download class="btn btn-primary mt-4">ダウンロード</a>`;
            break;
    }

    modalContent.innerHTML = contentHTML + buttonHTML;

    // もし「コピー」ボタンなら、クリックした時の動作を定義する
    if (treasure.button_type === 'copy') {
        const copyButton = document.getElementById('modal-action-button');
        copyButton.addEventListener('click', () => {
            if (!treasure.button_value) return;
            navigator.clipboard.writeText(treasure.button_value).then(() => {
                copyButton.textContent = 'コピーしました！';
                setTimeout(() => {
                    copyButton.textContent = 'プロンプトをコピー';
                }, 2000);
            });
        });
    }

    modalOverlay.classList.add('visible');
}
        function closeModal() {
            modalOverlay.classList.remove('visible');
        }

        // --- ビュー切り替え ---
        function switchView(viewName) {
            if (viewName === 'compass') {
                compassView.style.display = 'block';
                libraryView.style.display = 'none';
                compassToggle.classList.add('active');
                libraryToggle.classList.remove('active');
            } else {
                libraryView.style.display = 'block';
                compassView.style.display = 'none';
                libraryToggle.classList.add('active');
                compassToggle.classList.remove('active');
            }
        }
        compassToggle.addEventListener('click', () => switchView('compass'));
        libraryToggle.addEventListener('click', () => switchView('library'));

        // --- 羅針盤のロジック ---
        choiceBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const category = btn.dataset.category;
                const results = allTreasures.filter(t => t.category && t.category.includes(category));
                compassResults.innerHTML = '<h2 class="text-2xl font-bold mb-4">あなたへの神託</h2><div class="card-grid"></div>';
                const grid = compassResults.querySelector('.card-grid');
                results.forEach(treasure => {
                    grid.appendChild(createCard(treasure));
                });
            });
        });
        
        // --- 図書館の検索機能 ---
        searchBar.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const allCards = libraryGrid.querySelectorAll('.treasure-card');
            allCards.forEach(card => {
                const title = card.dataset.title;
                const description = card.dataset.description;
                if (title.includes(searchTerm) || description.includes(searchTerm)) {
                    card.classList.remove('is-hidden');
                } else {
                    card.classList.add('is-hidden');
                }
            });
        });

        // --- 初期化 ---
        allTreasures.forEach(treasure => {
            libraryGrid.appendChild(createCard(treasure));
        });
        switchView('library');
        modalClose.addEventListener('click', closeModal);
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) closeModal();
        });
    });
    </script>
</BaseLayout>