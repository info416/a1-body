---
import BaseLayout from '../../layouts/BaseLayout.astro';

// 【要修正】この書庫に対応する、WordPressで作成した「カテゴリーID」をここに設定せよ
const CATEGORY_ID = 33; // 例：「プロンプトの武器庫」カテゴリーのID

// 頭脳（WordPress）から、この書庫の蔵書（投稿）だけを召喚する
const response = await fetch(`https://ai-verve.net/snspack/wp-json/wp/v2/posts?categories=${CATEGORY_ID}&per_page=100&_fields=id,title,acf`);
const posts = await response.json();
---
<BaseLayout title="ミニプロダクト設計図集 - 叡智の宝物庫">
    <div class="content-wrapper">
        <h1 class="page-title mb-2">ミニプロダクト設計図集</h1>
        <p class="text-xl text-gray-400 mb-12">（ここに、この書庫の、顧客を導くための説明文を記述します）</p>

        {posts.length === 0 && (
            <p>現在、この書庫に収められた宝物はまだありません。新たな叡智が届くのをお待ちください。</p>
        )}

        <div class="card-grid">
            {posts.map(post => (
    <div 
        class="card treasure-card" 
        data-title={post.title.rendered}
        data-description={post.acf.treasure_description || ''}
        data-prompt={post.acf.treasure_prompt || ''}
        data-btn1-type={post.acf.button_1_type || ''}
        data-btn1-value={post.acf.button_1_value || ''}
        data-btn2-type={post.acf.button_2_type || ''}
        data-btn2-value={post.acf.button_2_value || ''}
    >
        <div class="card-link">
            <svg class="card-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21 7.5l-9-5.25L3 7.5m18 0l-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9" />
            </svg>
            <h3 class="card-title">{post.title.rendered}</h3>
            <p class="card-description">{post.acf.treasure_description}</p>
            <span class="card-cta mt-auto">宝を開ける &rarr;</span>
        </div>
    </div>
))}
        </div>
    </div>
    <script is:inline>
document.addEventListener('DOMContentLoaded', () => {
    // --- このページに存在する、全ての魂の器を召喚 ---
    const allCards = document.querySelectorAll('.treasure-card');
    const modalOverlay = document.getElementById('modal-overlay');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');
    const modalClose = document.getElementById('modal-close');

    // --- 書斎（モーダル）を開く儀式 ---
    function openModal(cardElement) {
        if (!modalOverlay) return;
        const treasure = cardElement.dataset; // カードが記憶している魂を読み取る

        modalTitle.textContent = treasure.title;

        let contentHTML = `<p>${treasure.description}</p>`;
        if (treasure.prompt) {
            contentHTML += `<div class="prompt-output-container mt-6"><div class="prompt-output-header"><h3 class="font-semibold text-gray-300">プロンプト</h3></div><pre class="prompt-output">${treasure.prompt}</pre></div>`;
        }

        let buttonHTML = '';
        if (treasure.btn1Type && treasure.btn1Type !== '(空)') {
            if (treasure.btn1Type === 'copy') buttonHTML += `<button class="modal-copy-btn btn btn-primary mt-4">プロンプトをコピー</button>`;
            else if (treasure.btn1Type === 'pdf') buttonHTML += `<a href="${treasure.btn1Value}" target="_blank" class="btn btn-primary mt-4">PDFで開く</a>`;
        }
        if (treasure.btn2Type && treasure.btn2Type !== '(空)') {
            if (buttonHTML !== '') buttonHTML += ' ';
            if (treasure.btn2Type === 'copy') buttonHTML += `<button class="modal-copy-btn btn btn-primary mt-4">プロンプトをコピー</button>`;
            else if (treasure.btn2Type === 'pdf') buttonHTML += `<a href="${treasure.btn2Value}" target="_blank" class="btn btn-primary mt-4">PDFで開く</a>`;
        }

        modalContent.innerHTML = contentHTML + '<div class="modal-actions">' + buttonHTML + '</div>';

        const copyButtons = modalContent.querySelectorAll('.modal-copy-btn');
        copyButtons.forEach(copyButton => {
            copyButton.addEventListener('click', () => {
                if (!treasure.prompt) return;
                navigator.clipboard.writeText(treasure.prompt).then(() => {
                    copyButton.textContent = 'コピーしました！';
                    setTimeout(() => { copyButton.textContent = 'プロンプトをコピー'; }, 2000);
                });
            });
        });

        modalOverlay.classList.add('visible');
    }

    // --- 書斎を閉じる儀式 ---
    function closeModal() {
        if (modalOverlay) modalOverlay.classList.remove('visible');
    }

    // --- このページの全てのカードに、魂を宿す ---
    allCards.forEach(card => {
        card.addEventListener('click', () => openModal(card));
    });

    // --- 閉じるボタンの神経接続 ---
    if(modalClose) modalClose.addEventListener('click', closeModal);
    if(modalOverlay) modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) closeModal();
    });
});
</script>
</BaseLayout>