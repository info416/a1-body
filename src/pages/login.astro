---
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="ログイン">
    <div class="login-container" style="max-width: 400px; margin: 5rem auto;">
        <h1 class="text-3xl font-bold text-center">ログイン</h1>
        <form id="login-form" class="mt-8 space-y-6">
            <div>
                <label for="email" class="form-label">メールアドレス</label>
                <input id="email" name="email" type="email" autocomplete="email" required class="form-input">
            </div>
            <div>
                <label for="password" class="form-label">パスワード</label>
                <input id="password" name="password" type="password" autocomplete="current-password" required class="form-input">
            </div>
            <div style="margin-top:1em;">
                <button type="submit" class="btn btn-primary w-full">ログインする</button>
            </div>
            <p id="error-message" class="text-red-400 text-center" style="display: none;"></p>
        </form>
    </div>

<script is:inline>
    const form = document.getElementById('login-form');
    const errorMessage = document.getElementById('error-message');

    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (errorMessage) errorMessage.style.display = 'none';

            const emailInput = document.getElementById('email');
            const passwordInput = document.getElementById('password');
            if (!emailInput || !passwordInput) return;

            const emailValue = emailInput.value;
            const passwordValue = passwordInput.value;

            try {
                const response = await fetch('https://ai-verve.net/snspack/wp-json/simple-jwt-login/v1/auth', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: emailValue, password: passwordValue }),
                });

                const data = await response.json();

                if (!response.ok || !data.success) {
                    throw new Error(data.data.message || 'ログインに失敗しました。');
                }

                const token = data.data.jwt;
                if (!token) {
                    throw new Error('認証トークンの取得に失敗しました。');
                }

                // ★★★【神託の解読】★★★
                // 受け取ったトークン（書物）を、自らの手で解読する
                const payloadBase64 = token.split('.')[1];
                const decodedPayload = atob(payloadBase64);
                const payload = JSON.parse(decodedPayload);
                
                // 書物から、必要な情報を全て抽出する
                const userName = payload.username;
                const userEmail = payload.email;

                if (!userName || !userEmail) {
                    throw new Error('認証情報は完全ですが、内部データが欠落しています。');
                }

                // 全ての情報を、ブラウザの記録保管庫に刻印する
                localStorage.setItem('jwt_token', token);
                localStorage.setItem('a1_userName', userName);
                localStorage.setItem('a1_userEmail', userEmail);
                
                window.location.href = '/dashboard';

            } catch (error) {
                if (errorMessage) {
                    errorMessage.textContent = error.message;
                    errorMessage.style.display = 'block';
                }
            }
        });
    }
</script>
</BaseLayout>